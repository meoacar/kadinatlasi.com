<?php

namespace App\Filament\Resources;

use App\Filament\Resources\PaymentSettingResource\Pages;
use App\Models\PaymentSetting;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;

class PaymentSettingResource extends Resource
{
    protected static ?string $model = PaymentSetting::class;
    protected static ?string $navigationIcon = 'heroicon-o-cog-6-tooth';
    protected static ?string $navigationLabel = 'Ödeme Ayarları';
    protected static ?string $modelLabel = 'Ödeme Ayarı';
    protected static ?string $pluralModelLabel = 'Ödeme Ayarları';
    protected static ?string $navigationGroup = 'Premium Üyelik';
    protected static ?int $navigationSort = 7;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('Ayar Bilgileri')
                    ->schema([
                        Forms\Components\TextInput::make('key')
                            ->label('Anahtar')
                            ->required()
                            ->unique(ignoreRecord: true)
                            ->helperText('Örnek: iyzico_api_key'),
                            
                        Forms\Components\TextInput::make('label')
                            ->label('Etiket')
                            ->required()
                            ->helperText('Kullanıcıya gösterilecek isim'),
                            
                        Forms\Components\Select::make('group')
                            ->label('Grup')
                            ->options([
                                'iyzico' => 'İyzico',
                                'paypal' => 'PayPal',
                                'stripe' => 'Stripe',
                                'general' => 'Genel',
                            ])
                            ->required(),
                            
                        Forms\Components\Select::make('type')
                            ->label('Tip')
                            ->options([
                                'text' => 'Metin',
                                'password' => 'Şifre',
                                'boolean' => 'Açık/Kapalı',
                                'select' => 'Seçim',
                                'url' => 'URL',
                            ])
                            ->required(),
                    ])->columns(2),
                    
                Forms\Components\Section::make('Değer ve Açıklama')
                    ->schema([
                        Forms\Components\Textarea::make('value')
                            ->label('Değer')
                            ->rows(3),
                            
                        Forms\Components\Textarea::make('description')
                            ->label('Açıklama')
                            ->rows(2)
                            ->helperText('Bu ayarın ne işe yaradığını açıklayın'),
                            
                        Forms\Components\Toggle::make('is_encrypted')
                            ->label('Şifrelensin')
                            ->helperText('Hassas bilgiler için açın (API key, secret key)'),
                    ]),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('label')
                    ->label('Etiket')
                    ->searchable()
                    ->sortable(),
                    
                Tables\Columns\TextColumn::make('key')
                    ->label('Anahtar')
                    ->searchable()
                    ->copyable(),
                    
                Tables\Columns\BadgeColumn::make('group')
                    ->label('Grup')
                    ->colors([
                        'primary' => 'iyzico',
                        'success' => 'paypal',
                        'warning' => 'stripe',
                        'secondary' => 'general',
                    ]),
                    
                Tables\Columns\BadgeColumn::make('type')
                    ->label('Tip')
                    ->colors([
                        'secondary' => 'text',
                        'danger' => 'password',
                        'success' => 'boolean',
                        'warning' => 'select',
                        'info' => 'url',
                    ]),
                    
                Tables\Columns\TextColumn::make('value')
                    ->label('Değer')
                    ->limit(30)
                    ->formatStateUsing(function ($state, $record) {
                        if ($record->is_encrypted || $record->type === 'password') {
                            return $state ? '••••••••' : 'Boş';
                        }
                        return $state ?: 'Boş';
                    }),
                    
                Tables\Columns\IconColumn::make('is_encrypted')
                    ->label('Şifreli')
                    ->boolean(),
                    
                Tables\Columns\TextColumn::make('updated_at')
                    ->label('Güncelleme')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('group')
                    ->label('Grup')
                    ->options([
                        'iyzico' => 'İyzico',
                        'paypal' => 'PayPal',
                        'stripe' => 'Stripe',
                        'general' => 'Genel',
                    ]),
                    
                Tables\Filters\SelectFilter::make('type')
                    ->label('Tip')
                    ->options([
                        'text' => 'Metin',
                        'password' => 'Şifre',
                        'boolean' => 'Açık/Kapalı',
                        'select' => 'Seçim',
                        'url' => 'URL',
                    ]),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->defaultSort('group');
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListPaymentSettings::route('/'),
            'create' => Pages\CreatePaymentSetting::route('/create'),
            'edit' => Pages\EditPaymentSetting::route('/{record}/edit'),
        ];
    }

    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::where('group', 'iyzico')->count();
    }
}